// <auto-generated />
using System;
using System.Collections.Generic;
using Administration.Infra.DataBase.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Administration.Infra.DataBase.EntityFramework.Migrations
{
    [DbContext(typeof(AdministrationDbContext))]
    [Migration("20250724000731_Product")]
    partial class Product
    {
        /// <summary>
        /// Configures the Entity Framework Core model for the "Product" migration, defining entities, value objects, relationships, and schema mappings for the "Administration" schema using PostgreSQL-specific conventions.
        /// </summary>
        /// <param name="modelBuilder">The builder used to construct the entity model and configure schema details.</param>
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Administration")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Administration.Application.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<TimeSpan>("PreparationTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Products", "Administration");
                });

            modelBuilder.Entity("Administration.Domain.Restaurants.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdministrativeEmail")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AdministrativePhone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CommercialEmail")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CommercialPhone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PrimaryContact")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants", "Administration");
                });

            modelBuilder.Entity("BuildingBlock.Application.Entities.OutboxMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SynReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SynReceivedFrom")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset?>("SyncSendAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessageEntities", "Administration");
                });

            modelBuilder.Entity("ProductSideDishes", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SideDishId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "SideDishId");

                    b.HasIndex("SideDishId");

                    b.ToTable("ProductSideDishes", "Administration");
                });

            modelBuilder.Entity("Administration.Application.Products.Product", b =>
                {
                    b.OwnsOne("Administration.Domain.Products.ValueObjects.ProductSubItem", "Additional", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Max")
                                .HasColumnType("integer");

                            b1.Property<int?>("Min")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("ProductAdditionals", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsMany("Administration.Domain.Products.ValueObjects.SubItem", "Items", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Description")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)");

                                    b2.PrimitiveCollection<List<string>>("Images")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(32)
                                        .HasColumnType("character varying(32)");

                                    b2.Property<Guid>("ProductAdditionalId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ProductAdditionalId");

                                    b2.ToTable("ProductAdditionalItems", "Administration");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductAdditionalId");

                                    b2.OwnsOne("BuildingBlock.Domain.ValueObjects.Products.SalePrice", "Price", b3 =>
                                        {
                                            b3.Property<Guid>("SubItemId")
                                                .HasColumnType("uuid");

                                            b3.Property<decimal>("MaxDiscount")
                                                .HasColumnType("numeric");

                                            b3.Property<decimal>("Value")
                                                .HasColumnType("numeric");

                                            b3.HasKey("SubItemId");

                                            b3.ToTable("ProductAdditionalItems", "Administration");

                                            b3.WithOwner()
                                                .HasForeignKey("SubItemId");
                                        });

                                    b2.Navigation("Price");
                                });

                            b1.Navigation("Items");
                        });

                    b.OwnsOne("Administration.Domain.Products.ValueObjects.ProductSubItem", "Flavor", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Max")
                                .HasColumnType("integer");

                            b1.Property<int?>("Min")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("ProductFlavors", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsMany("Administration.Domain.Products.ValueObjects.SubItem", "Items", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Description")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)");

                                    b2.PrimitiveCollection<List<string>>("Images")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(32)
                                        .HasColumnType("character varying(32)");

                                    b2.Property<Guid>("ProductFlavorId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ProductFlavorId");

                                    b2.ToTable("ProductFlavorItems", "Administration");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductFlavorId");

                                    b2.OwnsOne("BuildingBlock.Domain.ValueObjects.Products.SalePrice", "Price", b3 =>
                                        {
                                            b3.Property<Guid>("SubItemId")
                                                .HasColumnType("uuid");

                                            b3.Property<decimal>("MaxDiscount")
                                                .HasColumnType("numeric");

                                            b3.Property<decimal>("Value")
                                                .HasColumnType("numeric");

                                            b3.HasKey("SubItemId");

                                            b3.ToTable("ProductFlavorItems", "Administration");

                                            b3.WithOwner()
                                                .HasForeignKey("SubItemId");
                                        });

                                    b2.Navigation("Price");
                                });

                            b1.Navigation("Items");
                        });

                    b.OwnsOne("Administration.Domain.Products.ValueObjects.ProductSubItem", "Preference", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Max")
                                .HasColumnType("integer");

                            b1.Property<int?>("Min")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("ProductPreferences", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsMany("Administration.Domain.Products.ValueObjects.SubItem", "Items", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Description")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)");

                                    b2.PrimitiveCollection<List<string>>("Images")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(32)
                                        .HasColumnType("character varying(32)");

                                    b2.Property<Guid>("ProductPreferenceId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ProductPreferenceId");

                                    b2.ToTable("ProductPreferenceItems", "Administration");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductPreferenceId");

                                    b2.OwnsOne("BuildingBlock.Domain.ValueObjects.Products.SalePrice", "Price", b3 =>
                                        {
                                            b3.Property<Guid>("SubItemId")
                                                .HasColumnType("uuid");

                                            b3.Property<decimal>("MaxDiscount")
                                                .HasColumnType("numeric");

                                            b3.Property<decimal>("Value")
                                                .HasColumnType("numeric");

                                            b3.HasKey("SubItemId");

                                            b3.ToTable("ProductPreferenceItems", "Administration");

                                            b3.WithOwner()
                                                .HasForeignKey("SubItemId");
                                        });

                                    b2.Navigation("Price");
                                });

                            b1.Navigation("Items");
                        });

                    b.OwnsOne("Administration.Domain.Products.ValueObjects.ServesManyPeople", "ServesManyPeople", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Max")
                                .HasColumnType("integer");

                            b1.Property<int?>("Min")
                                .HasColumnType("integer");

                            b1.Property<int?>("Reference")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsMany("BuildingBlock.Domain.ValueObjects.Media.Image", "Images", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("AlternativeText")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("BlurHash")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)");

                            b1.Property<int>("Height")
                                .HasColumnType("integer");

                            b1.Property<string>("ThumbnailUri")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Uri")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<int>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId", "Id");

                            b1.ToTable("ProductImages", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("BuildingBlock.Domain.ValueObjects.Products.ProductionPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("MaxDiscount")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("ProductionCost")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Additional");

                    b.Navigation("Flavor");

                    b.Navigation("Images");

                    b.Navigation("Preference");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("ServesManyPeople")
                        .IsRequired();
                });

            modelBuilder.Entity("Administration.Domain.Restaurants.Models.Restaurant", b =>
                {
                    b.OwnsOne("BuildingBlock.Domain.ValueObjects.Location.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasColumnType("text")
                                .HasColumnName("Complement");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("ZIPCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ZIPCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSideDishes", b =>
                {
                    b.HasOne("Administration.Application.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Administration.Application.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("SideDishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
