// <auto-generated />
using System;
using System.Collections.Generic;
using Hexata.Infrastructure.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hexata.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(HexataDbContext))]
    [Migration("20250522004418_inicial2")]
    partial class inicial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hexata.BI.Application.DataBaseSyncs.Customers.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("Endereco");

                    b.Property<string>("AddressNumber")
                        .HasColumnType("text")
                        .HasColumnName("Numero do endereco");

                    b.Property<string>("AllowCourtesy")
                        .HasColumnType("text")
                        .HasColumnName("Autorizado cortesia");

                    b.Property<string>("CgcCpf")
                        .HasColumnType("text")
                        .HasColumnName("CG CPF");

                    b.Property<string>("Complement")
                        .HasColumnType("text")
                        .HasColumnName("Complemento");

                    b.Property<double?>("Credit")
                        .HasColumnType("double precision")
                        .HasColumnName("Credito");

                    b.Property<string>("CreditStatus")
                        .HasColumnType("text")
                        .HasColumnName("Situacao credito");

                    b.Property<int?>("DefaultDueDay")
                        .HasColumnType("integer")
                        .HasColumnName("Dia de vencimento");

                    b.Property<double?>("DeliveryFee")
                        .HasColumnType("double precision")
                        .HasColumnName("Taxa de entrega");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("Bairro");

                    b.Property<string>("Mobile")
                        .HasColumnType("text")
                        .HasColumnName("Celular");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("Observacoes");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Telefone");

                    b.Property<string>("Phone2")
                        .HasColumnType("text")
                        .HasColumnName("Telefone 2");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data de cadastro");

                    b.Property<int?>("SalesCount")
                        .HasColumnType("integer")
                        .HasColumnName("Quantidade de vendas");

                    b.Property<string>("TemporaryCredit")
                        .HasColumnType("text")
                        .HasColumnName("Credito temporario");

                    b.Property<string>("TradeName")
                        .HasColumnType("text")
                        .HasColumnName("Nome Fantasia Apelido");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Hexata.BI.Application.DataBaseSyncs.Sales.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApproximateCounterTime")
                        .HasColumnType("text")
                        .HasColumnName("Horario de aproximado balcao");

                    b.Property<string>("ApproximateTime")
                        .HasColumnType("text")
                        .HasColumnName("Horario aproximado");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data de chegada");

                    b.Property<string>("CardHolderName1")
                        .HasColumnType("text")
                        .HasColumnName("Nome cartao 1");

                    b.Property<string>("CardHolderName2")
                        .HasColumnType("text")
                        .HasColumnName("Nome cartao 2");

                    b.Property<double?>("CardValue1")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor cartao 1");

                    b.Property<double?>("CardValue2")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor cartao 2");

                    b.Property<double?>("CashRegister")
                        .HasColumnType("double precision")
                        .HasColumnName("Caixa");

                    b.Property<double?>("CashValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor em dinheiro");

                    b.Property<double?>("Change")
                        .HasColumnType("double precision")
                        .HasColumnName("Troco");

                    b.Property<string>("CheckNet")
                        .HasColumnType("text")
                        .HasColumnName("Check net");

                    b.Property<double?>("CheckValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor cheque");

                    b.Property<string>("ClosingAttendantName")
                        .HasColumnType("text")
                        .HasColumnName("Nome atendente de fechamento");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data de fechamento");

                    b.Property<double?>("CommissionValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor de comissão");

                    b.Property<string>("CounterReady")
                        .HasColumnType("text")
                        .HasColumnName("Pronto balcao");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo cliente");

                    b.Property<double?>("CustomerValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor do cliente");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("text")
                        .HasColumnName("Endereço da entrega");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data de entrega");

                    b.Property<int?>("DeliveryPersonId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo entregador");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("Desconto");

                    b.Property<double?>("DiscountValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor de desconto");

                    b.Property<double?>("DonatedChangeValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor do troco doado");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo funcionario");

                    b.Property<string>("FreeDelivery")
                        .HasColumnType("text")
                        .HasColumnName("Entrega gratuita");

                    b.Property<string>("IsPending")
                        .HasColumnType("text")
                        .HasColumnName("Em Espera");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text")
                        .HasColumnName("Bairro");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("Observacao");

                    b.Property<string>("PC")
                        .HasColumnType("text")
                        .HasColumnName("Pc");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("integer")
                        .HasColumnName("Status de pagamento");

                    b.Property<double?>("PixValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor pix");

                    b.Property<string>("SaleType")
                        .HasColumnType("text")
                        .HasColumnName("Tipo de venda");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<int?>("Term")
                        .HasColumnType("integer")
                        .HasColumnName("Prazo");

                    b.Property<double?>("TermValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor a prazo");

                    b.Property<string>("Terminal")
                        .HasColumnType("text")
                        .HasColumnName("Terminal");

                    b.Property<double?>("ValueWithDiscount")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor com desconto");

                    b.Property<double?>("ValueWithoutDiscount")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor sem desconto");

                    b.Property<string>("WebOrderGenerator")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Date");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Hexata.BI.Application.DataBaseSyncs.Sales.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("AuxiliarySpecies")
                        .HasColumnType("text[]")
                        .HasColumnName("Especies auxiliar");

                    b.Property<string>("CODESP1")
                        .HasColumnType("text")
                        .HasColumnName("CODESP1");

                    b.Property<string>("CODESP10")
                        .HasColumnType("text")
                        .HasColumnName("CODESP10");

                    b.Property<string>("CODESP2")
                        .HasColumnType("text")
                        .HasColumnName("CODESP2");

                    b.Property<string>("CODESP3")
                        .HasColumnType("text")
                        .HasColumnName("CODESP3");

                    b.Property<string>("CODESP4")
                        .HasColumnType("text")
                        .HasColumnName("CODESP4");

                    b.Property<string>("CODESP5")
                        .HasColumnType("text")
                        .HasColumnName("CODESP5");

                    b.Property<string>("CODESP6")
                        .HasColumnType("text")
                        .HasColumnName("CODESP6");

                    b.Property<string>("CODESP7")
                        .HasColumnType("text")
                        .HasColumnName("CODESP7");

                    b.Property<string>("CODESP8")
                        .HasColumnType("text")
                        .HasColumnName("CODESP8");

                    b.Property<string>("CODESP9")
                        .HasColumnType("text")
                        .HasColumnName("CODESP9");

                    b.Property<string>("CashRegister")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Caixa");

                    b.Property<string>("CashRegisterOperator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Operador do caixa");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo do cliente");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Telefone do cliente");

                    b.Property<string>("CommissionSituation")
                        .HasColumnType("text")
                        .HasColumnName("Situação da comissao");

                    b.Property<double>("CommissionValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor da comissao");

                    b.Property<string>("Computer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Computador");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Conteudo");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Descrição");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("Desconto");

                    b.Property<int?>("DiscountEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo funcionario do desconto");

                    b.Property<string>("DiscountEmployeeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome do funcionario de desconto");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo funcionario");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome do funcionario");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data de saida");

                    b.Property<double>("GrossValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor bruto");

                    b.Property<string>("GroupA")
                        .HasColumnType("text")
                        .HasColumnName("Grupo A");

                    b.Property<string>("GroupB")
                        .HasColumnType("text")
                        .HasColumnName("Grupo B");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Observação");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo de saida");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Produto");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("Quantidade");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data de retorno");

                    b.Property<string>("Situation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Situacao");

                    b.Property<double>("TotalDiscount")
                        .HasColumnType("double precision")
                        .HasColumnName("Total de desconto");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Unidade");

                    b.Property<double>("UnitValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Valor unitario");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data de retirada");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderId", "Product");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Hexata.Infrastructure.Postgres.Entities.OrderItemAuxiliarySpecie", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo de saida");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer")
                        .HasColumnName("Codigo saida item");

                    b.Property<string>("AuxiliarySpecie")
                        .HasColumnType("text")
                        .HasColumnName("Especie auxiliar");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Codigo saida item especie auxiliar");

                    b.HasKey("OrderId", "OrderItemId", "AuxiliarySpecie");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemAuxiliarySpecies");
                });

            modelBuilder.Entity("Hexata.BI.Application.DataBaseSyncs.Sales.Models.Order", b =>
                {
                    b.OwnsOne("Hexata.BI.Application.Dtos.LocalizationDto", "Localization", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("integer");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("Precision")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.ToJson("Localization");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Hexata.BI.Application.Services.Localizations.AddressDto", "Address", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("text");

                            b1.Property<string>("Number")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.ToJson("Address");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Localization");
                });

            modelBuilder.Entity("Hexata.BI.Application.DataBaseSyncs.Sales.Models.OrderItem", b =>
                {
                    b.HasOne("Hexata.BI.Application.DataBaseSyncs.Sales.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hexata.Infrastructure.Postgres.Entities.OrderItemAuxiliarySpecie", b =>
                {
                    b.HasOne("Hexata.BI.Application.DataBaseSyncs.Sales.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hexata.BI.Application.DataBaseSyncs.Sales.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
